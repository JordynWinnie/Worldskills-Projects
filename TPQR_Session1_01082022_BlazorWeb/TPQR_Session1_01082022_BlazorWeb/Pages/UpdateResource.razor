@page "/updateResource/{resId:int}"
@inject NavigationManager navManager
@inject LoginState loginState
@using Microsoft.EntityFrameworkCore;
<h3>UpdateResource</h3>

<p style="color: red">@_errorMessage</p>

<label>Resource Name: @resource.ResName </label>
<br />
<label>Resource Type: @resource.ResTypeIdFkNavigation.ResTypeName</label>

<br />
<label>Available Quantity:</label>
<input type="number" @bind="resource.RemainingQuantity" />
<br />
<label>Allocated Skills:</label>
<br />
@foreach (var skill in _skillListCheckbox)
{
    <input type="checkbox" @bind="_skillListCheckbox[skill.Key]" />
    @skill.Key.SkillName
    <br />
}

<button @onclick="Submit">Update Resource</button>

@code {
    [Parameter]
    public int resId { get; set; }

    private Resource resource = new Resource();

    private string _errorMessage = string.Empty;

    private Dictionary<Skill, bool> _skillListCheckbox = new Dictionary<Skill, bool>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!loginState.IsLoggedIn)
        {
            navManager.NavigateTo("/login/notLoggedIn");
        }

        using (var context = new Session1Context())
        {
            var resid = resId;
            resource = context.Resources.Where(x => x.ResId == resId)
                .Include(x => x.ResTypeIdFkNavigation)
                .Include(x=>x.ResourceAllocations).ThenInclude(x=>x.SkillIdFkNavigation)
                .FirstOrDefault();

            foreach (var skill in context.Skills)
            {
                if (resource.ResourceAllocations.Select(x => x.SkillIdFk).Contains(skill.SkillId))
                {
                    _skillListCheckbox.Add(skill, true);
                }
                else
                {
                    _skillListCheckbox.Add(skill, false);
                }

            }
        }
    }

    void Submit()
    {
        using (var context = new Session1Context())
        {
            if (resource.RemainingQuantity == 0 && _skillListCheckbox.Count(x => x.Value == true) > 0)
            {
                _errorMessage = "You may not allocate to any skills with 0 quantity";
                return;
            }


            var res = context.Resources.Where(x=>x.ResId == resource.ResId)
            .Include(x => x.ResourceAllocations)
            .ThenInclude(x => x.SkillIdFkNavigation).FirstOrDefault();

            res.RemainingQuantity = resource.RemainingQuantity;

            foreach (var item in res.ResourceAllocations.ToList())
            {
                context.ResourceAllocations.Remove(item);
            }

            foreach (var skill in _skillListCheckbox)
            {
                if (skill.Value)
                {
                    var resourceAlloc = new ResourceAllocation()
                    {
                        SkillIdFk = skill.Key.SkillId,
                        ResIdFk = resource.ResId
                    };
                    context.ResourceAllocations.Add(resourceAlloc);
                }

            }

            context.SaveChanges();
            navManager.NavigateTo("/resourceManagement");
        }
    }
}
